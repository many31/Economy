package net.milkbowl.vault.permission.plugins;

import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Logger;
import net.milkbowl.vault.permission.Permission;
import org.anjocaido.groupmanager.GroupManager;
import org.anjocaido.groupmanager.data.Group;
import org.anjocaido.groupmanager.data.User;
import org.anjocaido.groupmanager.dataholder.OverloadedWorldHolder;
import org.anjocaido.groupmanager.dataholder.worlds.WorldsHolder;
import org.anjocaido.groupmanager.permissions.AnjoPermissionsHandler;
import org.anjocaido.groupmanager.permissions.BukkitPermissions;
import org.bukkit.Bukkit;
import org.bukkit.Server;
import org.bukkit.World;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.server.PluginDisableEvent;
import org.bukkit.event.server.PluginEnableEvent;
import org.bukkit.permissions.PermissionAttachment;
import org.bukkit.permissions.PermissionAttachmentInfo;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.PluginManager;

public class Permission_GroupManager
  extends Permission
{
  private final String name = "GroupManager";
  private GroupManager groupManager;
  
  public Permission_GroupManager(Plugin plugin)
  {
    this.plugin = plugin;
    Bukkit.getServer().getPluginManager().registerEvents(new PermissionServerListener(this), plugin);
    if (this.groupManager == null)
    {
      Plugin perms = plugin.getServer().getPluginManager().getPlugin("GroupManager");
      if ((perms != null) && (perms.isEnabled()))
      {
        this.groupManager = ((GroupManager)perms);
        log.info(String.format("[%s][Permission] %s hooked.", new Object[] { plugin.getDescription().getName(), "GroupManager" }));
      }
    }
  }
  
  public class PermissionServerListener
    implements Listener
  {
    Permission_GroupManager permission = null;
    
    public PermissionServerListener(Permission_GroupManager permission)
    {
      this.permission = permission;
    }
    
    @EventHandler(priority=EventPriority.MONITOR)
    public void onPluginEnable(PluginEnableEvent event)
    {
      if (this.permission.groupManager == null)
      {
        Plugin p = event.getPlugin();
        if (p.getDescription().getName().equals("GroupManager"))
        {
          this.permission.groupManager = ((GroupManager)p);
          Permission_GroupManager.log.info(String.format("[%s][Permission] %s hooked.", new Object[] { Permission_GroupManager.this.plugin.getDescription().getName(), "GroupManager" }));
        }
      }
    }
    
    @EventHandler(priority=EventPriority.MONITOR)
    public void onPluginDisable(PluginDisableEvent event)
    {
      if ((this.permission.groupManager != null) && 
        (event.getPlugin().getDescription().getName().equals("GroupManager")))
      {
        this.permission.groupManager = null;
        Permission_GroupManager.log.info(String.format("[%s][Permission] %s un-hooked.", new Object[] { Permission_GroupManager.this.plugin.getDescription().getName(), "GroupManager" }));
      }
    }
  }
  
  public String getName()
  {
    getClass();return "GroupManager";
  }
  
  public boolean isEnabled()
  {
    return (this.groupManager != null) && (this.groupManager.isEnabled());
  }
  
  public boolean playerHas(String worldName, String playerName, String permission)
  {
    AnjoPermissionsHandler handler;
    AnjoPermissionsHandler handler;
    if (worldName == null) {
      handler = this.groupManager.getWorldsHolder().getWorldPermissionsByPlayerName(playerName);
    } else {
      handler = this.groupManager.getWorldsHolder().getWorldPermissions(worldName);
    }
    if (handler == null) {
      return false;
    }
    return handler.permission(playerName, permission);
  }
  
  public boolean playerAdd(String worldName, String playerName, String permission)
  {
    OverloadedWorldHolder owh;
    OverloadedWorldHolder owh;
    if (worldName == null) {
      owh = this.groupManager.getWorldsHolder().getWorldDataByPlayerName(playerName);
    } else {
      owh = this.groupManager.getWorldsHolder().getWorldData(worldName);
    }
    if (owh == null) {
      return false;
    }
    User user = owh.getUser(playerName);
    if (user == null) {
      return false;
    }
    user.addPermission(permission);
    Player p = Bukkit.getPlayer(playerName);
    if (p != null) {
      GroupManager.BukkitPermissions.updatePermissions(p);
    }
    return true;
  }
  
  public boolean playerRemove(String worldName, String playerName, String permission)
  {
    OverloadedWorldHolder owh;
    OverloadedWorldHolder owh;
    if (worldName == null) {
      owh = this.groupManager.getWorldsHolder().getWorldDataByPlayerName(playerName);
    } else {
      owh = this.groupManager.getWorldsHolder().getWorldData(worldName);
    }
    if (owh == null) {
      return false;
    }
    User user = owh.getUser(playerName);
    if (user == null) {
      return false;
    }
    user.removePermission(permission);
    Player p = Bukkit.getPlayer(playerName);
    if (p != null) {
      GroupManager.BukkitPermissions.updatePermissions(p);
    }
    return true;
  }
  
  public boolean groupHas(String worldName, String groupName, String permission)
  {
    OverloadedWorldHolder owh;
    OverloadedWorldHolder owh;
    if (worldName == null) {
      owh = this.groupManager.getWorldsHolder().getDefaultWorld();
    } else {
      owh = this.groupManager.getWorldsHolder().getWorldData(worldName);
    }
    if (owh == null) {
      return false;
    }
    Group group = owh.getGroup(groupName);
    if (group == null) {
      return false;
    }
    return group.hasSamePermissionNode(permission);
  }
  
  public boolean groupAdd(String worldName, String groupName, String permission)
  {
    OverloadedWorldHolder owh;
    OverloadedWorldHolder owh;
    if (worldName == null) {
      owh = this.groupManager.getWorldsHolder().getDefaultWorld();
    } else {
      owh = this.groupManager.getWorldsHolder().getWorldData(worldName);
    }
    if (owh == null) {
      return false;
    }
    Group group = owh.getGroup(groupName);
    if (group == null) {
      return false;
    }
    group.addPermission(permission);
    return true;
  }
  
  public boolean groupRemove(String worldName, String groupName, String permission)
  {
    OverloadedWorldHolder owh;
    OverloadedWorldHolder owh;
    if (worldName == null) {
      owh = this.groupManager.getWorldsHolder().getDefaultWorld();
    } else {
      owh = this.groupManager.getWorldsHolder().getWorldData(worldName);
    }
    if (owh == null) {
      return false;
    }
    Group group = owh.getGroup(groupName);
    if (group == null) {
      return false;
    }
    group.removePermission(permission);
    return true;
  }
  
  public boolean playerInGroup(String worldName, String playerName, String groupName)
  {
    AnjoPermissionsHandler handler;
    AnjoPermissionsHandler handler;
    if (worldName == null) {
      handler = this.groupManager.getWorldsHolder().getWorldPermissionsByPlayerName(playerName);
    } else {
      handler = this.groupManager.getWorldsHolder().getWorldPermissions(worldName);
    }
    if (handler == null) {
      return false;
    }
    return handler.inGroup(playerName, groupName);
  }
  
  public boolean playerAddGroup(String worldName, String playerName, String groupName)
  {
    OverloadedWorldHolder owh;
    OverloadedWorldHolder owh;
    if (worldName == null) {
      owh = this.groupManager.getWorldsHolder().getWorldDataByPlayerName(playerName);
    } else {
      owh = this.groupManager.getWorldsHolder().getWorldData(worldName);
    }
    if (owh == null) {
      return false;
    }
    User user = owh.getUser(playerName);
    if (user == null) {
      return false;
    }
    Group group = owh.getGroup(groupName);
    if (group == null) {
      return false;
    }
    if (user.getGroup().equals(owh.getDefaultGroup())) {
      user.setGroup(group);
    } else if (group.getInherits().contains(user.getGroup().getName().toLowerCase())) {
      user.setGroup(group);
    } else {
      user.addSubGroup(group);
    }
    Player p = Bukkit.getPlayer(playerName);
    if (p != null) {
      GroupManager.BukkitPermissions.updatePermissions(p);
    }
    return true;
  }
  
  public boolean playerRemoveGroup(String worldName, String playerName, String groupName)
  {
    OverloadedWorldHolder owh;
    OverloadedWorldHolder owh;
    if (worldName == null) {
      owh = this.groupManager.getWorldsHolder().getWorldDataByPlayerName(playerName);
    } else {
      owh = this.groupManager.getWorldsHolder().getWorldData(worldName);
    }
    if (owh == null) {
      return false;
    }
    User user = owh.getUser(playerName);
    if (user == null) {
      return false;
    }
    boolean success = false;
    if (user.getGroup().getName().equalsIgnoreCase(groupName))
    {
      user.setGroup(owh.getDefaultGroup());
      success = true;
    }
    else
    {
      Group group = owh.getGroup(groupName);
      if (group != null) {
        success = user.removeSubGroup(group);
      }
    }
    if (success)
    {
      Player p = Bukkit.getPlayer(playerName);
      if (p != null) {
        GroupManager.BukkitPermissions.updatePermissions(p);
      }
    }
    return success;
  }
  
  public String[] getPlayerGroups(String worldName, String playerName)
  {
    AnjoPermissionsHandler handler;
    AnjoPermissionsHandler handler;
    if (worldName == null) {
      handler = this.groupManager.getWorldsHolder().getWorldPermissionsByPlayerName(playerName);
    } else {
      handler = this.groupManager.getWorldsHolder().getWorldPermissions(worldName);
    }
    if (handler == null) {
      return null;
    }
    return handler.getGroups(playerName);
  }
  
  public String getPrimaryGroup(String worldName, String playerName)
  {
    AnjoPermissionsHandler handler;
    AnjoPermissionsHandler handler;
    if (worldName == null) {
      handler = this.groupManager.getWorldsHolder().getWorldPermissionsByPlayerName(playerName);
    } else {
      handler = this.groupManager.getWorldsHolder().getWorldPermissions(worldName);
    }
    if (handler == null) {
      return null;
    }
    return handler.getGroup(playerName);
  }
  
  public boolean playerAddTransient(String world, String player, String permission)
  {
    if (world != null) {
      throw new UnsupportedOperationException(getName() + " does not support World based transient permissions!");
    }
    Player p = this.plugin.getServer().getPlayer(player);
    if (p == null) {
      throw new UnsupportedOperationException(getName() + " does not support offline player transient permissions!");
    }
    for (PermissionAttachmentInfo paInfo : p.getEffectivePermissions()) {
      if (paInfo.getAttachment().getPlugin().equals(this.plugin))
      {
        paInfo.getAttachment().setPermission(permission, true);
        return true;
      }
    }
    PermissionAttachment attach = p.addAttachment(this.plugin);
    attach.setPermission(permission, true);
    
    return true;
  }
  
  public boolean playerRemoveTransient(String world, String player, String permission)
  {
    if (world != null) {
      throw new UnsupportedOperationException(getName() + " does not support World based transient permissions!");
    }
    Player p = this.plugin.getServer().getPlayer(player);
    if (p == null) {
      throw new UnsupportedOperationException(getName() + " does not support offline player transient permissions!");
    }
    for (PermissionAttachmentInfo paInfo : p.getEffectivePermissions()) {
      if (paInfo.getAttachment().getPlugin().equals(this.plugin)) {
        return ((Boolean)paInfo.getAttachment().getPermissions().remove(permission)).booleanValue();
      }
    }
    return false;
  }
  
  public String[] getGroups()
  {
    Set<String> groupNames = new HashSet();
    for (World world : Bukkit.getServer().getWorlds())
    {
      OverloadedWorldHolder owh = this.groupManager.getWorldsHolder().getWorldData(world.getName());
      if (owh != null)
      {
        Collection<Group> groups = owh.getGroupList();
        if (groups != null) {
          for (Group group : groups) {
            groupNames.add(group.getName());
          }
        }
      }
    }
    return (String[])groupNames.toArray(new String[0]);
  }
  
  public boolean hasSuperPermsCompat()
  {
    return true;
  }
  
  public boolean hasGroupSupport()
  {
    return true;
  }
}
