package net.milkbowl.vault.permission.plugins;

import de.bananaco.permissions.Permissions;
import de.bananaco.permissions.interfaces.PermissionSet;
import de.bananaco.permissions.worlds.HasPermission;
import de.bananaco.permissions.worlds.WorldPermissionsManager;
import java.util.List;
import java.util.logging.Logger;
import net.milkbowl.vault.permission.Permission;
import org.bukkit.Bukkit;
import org.bukkit.Server;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.server.PluginDisableEvent;
import org.bukkit.event.server.PluginEnableEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.PluginManager;

public class Permission_bPermissions
  extends Permission
{
  private final String name = "bPermissions";
  private WorldPermissionsManager perms;
  
  public Permission_bPermissions(Plugin plugin)
  {
    this.plugin = plugin;
    Bukkit.getServer().getPluginManager().registerEvents(new PermissionServerListener(), plugin);
    if (this.perms == null)
    {
      Plugin p = plugin.getServer().getPluginManager().getPlugin("bPermissions");
      if (p != null)
      {
        this.perms = Permissions.getWorldPermissionsManager();
        log.info(String.format("[%s][Permission] %s hooked.", new Object[] { plugin.getDescription().getName(), "bPermissions" }));
      }
    }
  }
  
  public class PermissionServerListener
    implements Listener
  {
    public PermissionServerListener() {}
    
    @EventHandler(priority=EventPriority.MONITOR)
    public void onPluginEnable(PluginEnableEvent event)
    {
      if (Permission_bPermissions.this.perms == null)
      {
        Plugin p = event.getPlugin();
        if ((p.getDescription().getName().equals("bPermissions")) && (p.isEnabled()))
        {
          Permission_bPermissions.this.perms = Permissions.getWorldPermissionsManager();
          Permission_bPermissions.log.info(String.format("[%s][Permission] %s hooked.", new Object[] { Permission_bPermissions.this.plugin.getDescription().getName(), "bPermissions" }));
        }
      }
    }
    
    @EventHandler(priority=EventPriority.MONITOR)
    public void onPluginDisable(PluginDisableEvent event)
    {
      if ((Permission_bPermissions.this.perms != null) && 
        (event.getPlugin().getDescription().getName().equals("bPermissions")))
      {
        Permission_bPermissions.this.perms = null;
        Permission_bPermissions.log.info(String.format("[%s][Permission] %s un-hooked.", new Object[] { Permission_bPermissions.this.plugin.getDescription().getName(), "bPermissions" }));
      }
    }
  }
  
  public String getName()
  {
    return "bPermissions";
  }
  
  public boolean isEnabled()
  {
    return this.perms != null;
  }
  
  public boolean playerHas(String world, String player, String permission)
  {
    return HasPermission.has(player, world, permission);
  }
  
  public boolean playerAdd(String world, String player, String permission)
  {
    if (world == null) {
      return false;
    }
    PermissionSet set = this.perms.getPermissionSet(world);
    if (set == null) {
      return false;
    }
    set.addPlayerNode(permission, player);
    return true;
  }
  
  public boolean playerRemove(String world, String player, String permission)
  {
    if (world == null) {
      return false;
    }
    PermissionSet set = this.perms.getPermissionSet(world);
    if (set == null) {
      return false;
    }
    set.removePlayerNode(permission, player);
    return true;
  }
  
  public boolean groupHas(String world, String group, String permission)
  {
    if (world == null) {
      return false;
    }
    PermissionSet set = this.perms.getPermissionSet(world);
    if (set == null) {
      return false;
    }
    if (set.getGroupNodes(group) == null) {
      return false;
    }
    return set.getGroupNodes(group).contains(permission);
  }
  
  public boolean groupAdd(String world, String group, String permission)
  {
    if (world == null) {
      return false;
    }
    PermissionSet set = this.perms.getPermissionSet(world);
    if (set == null) {
      return false;
    }
    if (set.getGroupNodes(group) == null) {
      return false;
    }
    set.addNode(permission, group);
    return true;
  }
  
  public boolean groupRemove(String world, String group, String permission)
  {
    if (world == null) {
      return false;
    }
    PermissionSet set = this.perms.getPermissionSet(world);
    if (set == null) {
      return false;
    }
    if (set.getGroupNodes(group) == null) {
      return false;
    }
    set.removeNode(permission, group);
    return true;
  }
  
  public boolean playerInGroup(String world, String player, String group)
  {
    if (world == null) {
      return false;
    }
    PermissionSet set = this.perms.getPermissionSet(world);
    if (set == null) {
      return false;
    }
    if (set.getGroups(player) == null) {
      return false;
    }
    return set.getGroups(player).contains(group);
  }
  
  public boolean playerAddGroup(String world, String player, String group)
  {
    if (world == null) {
      return false;
    }
    PermissionSet set = this.perms.getPermissionSet(world);
    if (set == null) {
      return false;
    }
    if (set.getGroupNodes(group) == null) {
      return false;
    }
    set.addGroup(player, group);
    return true;
  }
  
  public boolean playerRemoveGroup(String world, String player, String group)
  {
    if (world == null) {
      return false;
    }
    PermissionSet set = this.perms.getPermissionSet(world);
    if (set == null) {
      return false;
    }
    set.removeGroup(player, group);
    return true;
  }
  
  public String[] getPlayerGroups(String world, String player)
  {
    if (world == null) {
      return null;
    }
    PermissionSet set = this.perms.getPermissionSet(world);
    if (set == null) {
      return null;
    }
    List<String> groups = set.getGroups(player);
    return groups == null ? null : (String[])groups.toArray(new String[0]);
  }
  
  public String getPrimaryGroup(String world, String player)
  {
    if (world == null) {
      return null;
    }
    PermissionSet set = this.perms.getPermissionSet(world);
    if (set == null) {
      return null;
    }
    List<String> groups = set.getGroups(player);
    if ((groups == null) || (groups.isEmpty())) {
      return null;
    }
    return (String)groups.get(0);
  }
  
  public String[] getGroups()
  {
    throw new UnsupportedOperationException("bPermissions does not support server-wide groups");
  }
  
  public boolean hasSuperPermsCompat()
  {
    return true;
  }
  
  public boolean hasGroupSupport()
  {
    return true;
  }
}
