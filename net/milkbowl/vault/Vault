package net.milkbowl.vault;

import com.nijikokun.register.payment.Methods;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLConnection;
import java.util.Collection;
import java.util.Iterator;
import java.util.logging.Logger;
import net.milkbowl.vault.chat.Chat;
import net.milkbowl.vault.chat.plugins.Chat_DroxPerms;
import net.milkbowl.vault.chat.plugins.Chat_GroupManager;
import net.milkbowl.vault.chat.plugins.Chat_OverPermissions;
import net.milkbowl.vault.chat.plugins.Chat_Permissions3;
import net.milkbowl.vault.chat.plugins.Chat_PermissionsEx;
import net.milkbowl.vault.chat.plugins.Chat_Privileges;
import net.milkbowl.vault.chat.plugins.Chat_TotalPermissions;
import net.milkbowl.vault.chat.plugins.Chat_bPermissions;
import net.milkbowl.vault.chat.plugins.Chat_bPermissions2;
import net.milkbowl.vault.chat.plugins.Chat_iChat;
import net.milkbowl.vault.chat.plugins.Chat_mChat;
import net.milkbowl.vault.chat.plugins.Chat_mChatSuite;
import net.milkbowl.vault.chat.plugins.Chat_rscPermissions;
import net.milkbowl.vault.chat.plugins.Chat_zPermissions;
import net.milkbowl.vault.economy.Economy;
import net.milkbowl.vault.economy.plugins.Economy_3co;
import net.milkbowl.vault.economy.plugins.Economy_AEco;
import net.milkbowl.vault.economy.plugins.Economy_BOSE6;
import net.milkbowl.vault.economy.plugins.Economy_BOSE7;
import net.milkbowl.vault.economy.plugins.Economy_CommandsEX;
import net.milkbowl.vault.economy.plugins.Economy_Craftconomy;
import net.milkbowl.vault.economy.plugins.Economy_Craftconomy3;
import net.milkbowl.vault.economy.plugins.Economy_CurrencyCore;
import net.milkbowl.vault.economy.plugins.Economy_DigiCoin;
import net.milkbowl.vault.economy.plugins.Economy_Dosh;
import net.milkbowl.vault.economy.plugins.Economy_EconXP;
import net.milkbowl.vault.economy.plugins.Economy_Essentials;
import net.milkbowl.vault.economy.plugins.Economy_GoldIsMoney;
import net.milkbowl.vault.economy.plugins.Economy_GoldIsMoney2;
import net.milkbowl.vault.economy.plugins.Economy_GoldenChestEconomy;
import net.milkbowl.vault.economy.plugins.Economy_Gringotts;
import net.milkbowl.vault.economy.plugins.Economy_McMoney;
import net.milkbowl.vault.economy.plugins.Economy_MiConomy;
import net.milkbowl.vault.economy.plugins.Economy_MineConomy;
import net.milkbowl.vault.economy.plugins.Economy_Minefaconomy;
import net.milkbowl.vault.economy.plugins.Economy_MultiCurrency;
import net.milkbowl.vault.economy.plugins.Economy_SDFEconomy;
import net.milkbowl.vault.economy.plugins.Economy_TAEcon;
import net.milkbowl.vault.economy.plugins.Economy_XPBank;
import net.milkbowl.vault.economy.plugins.Economy_eWallet;
import net.milkbowl.vault.economy.plugins.Economy_iConomy4;
import net.milkbowl.vault.economy.plugins.Economy_iConomy5;
import net.milkbowl.vault.economy.plugins.Economy_iConomy6;
import net.milkbowl.vault.permission.plugins.Permission_DroxPerms;
import net.milkbowl.vault.permission.plugins.Permission_GroupManager;
import net.milkbowl.vault.permission.plugins.Permission_KPerms;
import net.milkbowl.vault.permission.plugins.Permission_OverPermissions;
import net.milkbowl.vault.permission.plugins.Permission_Permissions3;
import net.milkbowl.vault.permission.plugins.Permission_PermissionsBukkit;
import net.milkbowl.vault.permission.plugins.Permission_PermissionsEx;
import net.milkbowl.vault.permission.plugins.Permission_Privileges;
import net.milkbowl.vault.permission.plugins.Permission_SimplyPerms;
import net.milkbowl.vault.permission.plugins.Permission_Starburst;
import net.milkbowl.vault.permission.plugins.Permission_SuperPerms;
import net.milkbowl.vault.permission.plugins.Permission_TotalPermissions;
import net.milkbowl.vault.permission.plugins.Permission_Xperms;
import net.milkbowl.vault.permission.plugins.Permission_bPermissions;
import net.milkbowl.vault.permission.plugins.Permission_bPermissions2;
import net.milkbowl.vault.permission.plugins.Permission_rscPermissions;
import net.milkbowl.vault.permission.plugins.Permission_zPermissions;
import org.bukkit.Bukkit;
import org.bukkit.OfflinePlayer;
import org.bukkit.Server;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.command.ConsoleCommandSender;
import org.bukkit.command.PluginCommand;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.FileConfigurationOptions;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.server.PluginEnableEvent;
import org.bukkit.permissions.PermissionDefault;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.RegisteredServiceProvider;
import org.bukkit.plugin.ServicePriority;
import org.bukkit.plugin.ServicesManager;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitScheduler;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

public class Vault
  extends JavaPlugin
{
  private static Logger log;
  private net.milkbowl.vault.permission.Permission perms;
  private String newVersionTitle;
  private double newVersion;
  private double currentVersion;
  private String currentVersionTitle;
  private ServicesManager sm;
  private Metrics metrics;
  private Vault plugin;
  
  public Vault()
  {
    this.newVersionTitle = "";
    this.newVersion = 0.0D;
    this.currentVersion = 0.0D;
    this.currentVersionTitle = "";
  }
  
  public void onDisable()
  {
    getServer().getServicesManager().unregisterAll(this);
    Bukkit.getScheduler().cancelTasks(this);
  }
  
  public void onEnable()
  {
    this.plugin = this;
    log = getLogger();
    this.currentVersionTitle = getDescription().getVersion().split("-")[0];
    this.currentVersion = Double.valueOf(this.currentVersionTitle.replaceFirst("\\.", "")).doubleValue();
    this.sm = getServer().getServicesManager();
    
    getConfig().addDefault("update-check", Boolean.valueOf(true));
    getConfig().options().copyDefaults(true);
    saveConfig();
    

    loadEconomy();
    loadPermission();
    loadChat();
    
    getCommand("vault-info").setExecutor(this);
    getCommand("vault-convert").setExecutor(this);
    getServer().getPluginManager().registerEvents(new VaultListener(), this);
    

    getServer().getScheduler().runTask(this, new Runnable()
    {
      public void run()
      {
        org.bukkit.permissions.Permission perm = Vault.this.getServer().getPluginManager().getPermission("vault.update");
        if (perm == null)
        {
          perm = new org.bukkit.permissions.Permission("vault.update");
          perm.setDefault(PermissionDefault.OP);
          Vault.this.plugin.getServer().getPluginManager().addPermission(perm);
        }
        perm.setDescription("Allows a user or the console to check for vault updates");
        
        Vault.this.getServer().getScheduler().runTaskTimerAsynchronously(Vault.this.plugin, new Runnable()
        {
          public void run()
          {
            if ((Vault.this.getServer().getConsoleSender().hasPermission("vault.update")) && (Vault.this.getConfig().getBoolean("update-check", true))) {
              try
              {
                Vault.this.newVersion = Vault.this.updateCheck(Vault.this.currentVersion);
                Vault.log.info("Checking for Updates:");
                if (Vault.this.newVersion > Vault.this.currentVersion)
                {
                  Vault.log.warning("Stable Version: " + Vault.this.newVersionTitle + " is out!" + " You are still running version: " + Vault.this.currentVersionTitle);
                  Vault.log.warning("Update at: http://dev.bukkit.org/server-mods/vault");
                }
                else if (Vault.this.currentVersion > Vault.this.newVersion)
                {
                  Vault.log.info("Stable Version: " + Vault.this.newVersionTitle + " | Current Version: " + Vault.this.currentVersionTitle);
                }
                else
                {
                  Vault.log.info("No new version available");
                }
              }
              catch (Exception e) {}
            }
          }
        }, 0L, 432000L);
      }
    });
    try
    {
      this.metrics = new Metrics(this);
      this.metrics.findCustomData();
      this.metrics.start();
    }
    catch (IOException e) {}
    log.info(String.format("Enabled Version %s", new Object[] { getDescription().getVersion() }));
  }
  
  private void loadChat()
  {
    hookChat("PermissionsEx", Chat_PermissionsEx.class, ServicePriority.Highest, new String[] { "ru.tehkode.permissions.bukkit.PermissionsEx" });
    

    hookChat("mChatSuite", Chat_mChatSuite.class, ServicePriority.Highest, new String[] { "in.mDev.MiracleM4n.mChatSuite.mChatSuite" });
    

    hookChat("mChat", Chat_mChat.class, ServicePriority.Highest, new String[] { "net.D3GN.MiracleM4n.mChat" });
    

    hookChat("OverPermissions", Chat_OverPermissions.class, ServicePriority.Highest, new String[] { "com.overmc.overpermissions.OverPermissions" });
    

    hookChat("DroxPerms", Chat_DroxPerms.class, ServicePriority.Lowest, new String[] { "de.hydrox.bukkit.DroxPerms.DroxPerms" });
    

    hookChat("bPermssions2", Chat_bPermissions2.class, ServicePriority.Highest, new String[] { "de.bananaco.bpermissions.api.ApiLayer" });
    

    hookChat("bPermissions", Chat_bPermissions.class, ServicePriority.Normal, new String[] { "de.bananaco.permissions.info.InfoReader" });
    

    hookChat("GroupManager", Chat_GroupManager.class, ServicePriority.Normal, new String[] { "org.anjocaido.groupmanager.GroupManager" });
    

    hookChat("Permissions3", Chat_Permissions3.class, ServicePriority.Normal, new String[] { "com.nijiko.permissions.ModularControl" });
    

    hookChat("iChat", Chat_iChat.class, ServicePriority.Low, new String[] { "net.TheDgtl.iChat.iChat" });
    

    hookChat("zPermissions", Chat_zPermissions.class, ServicePriority.Normal, new String[] { "org.tyrannyofheaven.bukkit.zPermissions.model.EntityMetadata" });
    

    hookChat("Privileges", Chat_Privileges.class, ServicePriority.Normal, new String[] { "net.krinsoft.privileges.Privileges" });
    

    hookChat("rscPermissions", Chat_rscPermissions.class, ServicePriority.Normal, new String[] { "ru.simsonic.rscPermissions.MainPluginClass" });
    

    hookChat("TotalPermissions", Chat_TotalPermissions.class, ServicePriority.Normal, new String[] { "net.ar97.totalpermissions.TotalPermissions" });
  }
  
  private void loadEconomy()
  {
    hookEconomy("MiConomy", Economy_MiConomy.class, ServicePriority.Normal, new String[] { "com.gmail.bleedobsidian.miconomy.Main" });
    

    hookEconomy("MineFaConomy", Economy_Minefaconomy.class, ServicePriority.Normal, new String[] { "me.coniin.plugins.minefaconomy.Minefaconomy" });
    

    hookEconomy("MultiCurrency", Economy_MultiCurrency.class, ServicePriority.Normal, new String[] { "me.ashtheking.currency.Currency", "me.ashtheking.currency.CurrencyList" });
    

    hookEconomy("MineConomy", Economy_MineConomy.class, ServicePriority.Normal, new String[] { "me.mjolnir.mineconomy.MineConomy" });
    

    hookEconomy("AEco", Economy_AEco.class, ServicePriority.Normal, new String[] { "org.neocraft.AEco.AEco" });
    

    hookEconomy("McMoney", Economy_McMoney.class, ServicePriority.Normal, new String[] { "boardinggamer.mcmoney.McMoneyAPI" });
    

    hookEconomy("CraftConomy", Economy_Craftconomy.class, ServicePriority.Normal, new String[] { "me.greatman.Craftconomy.Craftconomy" });
    

    hookEconomy("CraftConomy3", Economy_Craftconomy3.class, ServicePriority.Normal, new String[] { "com.greatmancode.craftconomy3.tools.interfaces.BukkitLoader" });
    

    hookEconomy("eWallet", Economy_eWallet.class, ServicePriority.Normal, new String[] { "me.ethan.eWallet.ECO" });
    

    hookEconomy("3co", Economy_3co.class, ServicePriority.Normal, new String[] { "me.ic3d.eco.ECO" });
    

    hookEconomy("BOSEconomy6", Economy_BOSE6.class, ServicePriority.Normal, new String[] { "cosine.boseconomy.BOSEconomy", "cosine.boseconomy.CommandManager" });
    

    hookEconomy("BOSEconomy7", Economy_BOSE7.class, ServicePriority.Normal, new String[] { "cosine.boseconomy.BOSEconomy", "cosine.boseconomy.CommandHandler" });
    

    hookEconomy("CurrencyCore", Economy_CurrencyCore.class, ServicePriority.Normal, new String[] { "is.currency.Currency" });
    

    hookEconomy("Gringotts", Economy_Gringotts.class, ServicePriority.Normal, new String[] { "org.gestern.gringotts.Gringotts" });
    

    hookEconomy("Essentials Economy", Economy_Essentials.class, ServicePriority.Low, new String[] { "com.earth2me.essentials.api.Economy", "com.earth2me.essentials.api.NoLoanPermittedException", "com.earth2me.essentials.api.UserDoesNotExistException" });
    

    hookEconomy("iConomy 4", Economy_iConomy4.class, ServicePriority.High, new String[] { "com.nijiko.coelho.iConomy.iConomy", "com.nijiko.coelho.iConomy.system.Account" });
    

    hookEconomy("iConomy 5", Economy_iConomy5.class, ServicePriority.High, new String[] { "com.iConomy.iConomy", "com.iConomy.system.Account", "com.iConomy.system.Holdings" });
    

    hookEconomy("iConomy 6", Economy_iConomy6.class, ServicePriority.High, new String[] { "com.iCo6.iConomy" });
    

    hookEconomy("EconXP", Economy_EconXP.class, ServicePriority.Normal, new String[] { "ca.agnate.EconXP.EconXP" });
    

    hookEconomy("GoldIsMoney", Economy_GoldIsMoney.class, ServicePriority.Normal, new String[] { "com.flobi.GoldIsMoney.GoldIsMoney" });
    

    hookEconomy("GoldIsMoney2", Economy_GoldIsMoney2.class, ServicePriority.Normal, new String[] { "com.flobi.GoldIsMoney2.GoldIsMoney" });
    

    hookEconomy("GoldenChestEconomy", Economy_GoldenChestEconomy.class, ServicePriority.Normal, new String[] { "me.igwb.GoldenChest.GoldenChestEconomy" });
    

    hookEconomy("Dosh", Economy_Dosh.class, ServicePriority.Normal, new String[] { "com.gravypod.Dosh.Dosh" });
    

    hookEconomy("CommandsEX", Economy_CommandsEX.class, ServicePriority.Normal, new String[] { "com.github.zathrus_writer.commandsex.api.EconomyAPI" });
    

    hookEconomy("SDFEconomy", Economy_SDFEconomy.class, ServicePriority.Normal, new String[] { "com.github.omwah.SDFEconomy.SDFEconomy" });
    

    hookEconomy("XPBank", Economy_XPBank.class, ServicePriority.Normal, new String[] { "com.gmail.mirelatrue.xpbank.XPBank" });
    

    hookEconomy("TAEcon", Economy_TAEcon.class, ServicePriority.Normal, new String[] { "net.teamalpha.taecon.TAEcon" });
    

    hookEconomy("DigiCoin", Economy_DigiCoin.class, ServicePriority.Normal, new String[] { "co.uk.silvania.cities.digicoin.DigiCoin" });
  }
  
  private void loadPermission()
  {
    hookPermission("Starburst", Permission_Starburst.class, ServicePriority.Highest, new String[] { "com.dthielke.starburst.StarburstPlugin" });
    

    hookPermission("PermissionsEx", Permission_PermissionsEx.class, ServicePriority.Highest, new String[] { "ru.tehkode.permissions.bukkit.PermissionsEx" });
    

    hookPermission("OverPermissions", Permission_OverPermissions.class, ServicePriority.Highest, new String[] { "com.overmc.overpermissions.OverPermissions" });
    

    hookPermission("PermissionsBukkit", Permission_PermissionsBukkit.class, ServicePriority.Normal, new String[] { "com.platymuus.bukkit.permissions.PermissionsPlugin" });
    

    hookPermission("DroxPerms", Permission_DroxPerms.class, ServicePriority.High, new String[] { "de.hydrox.bukkit.DroxPerms.DroxPerms" });
    

    hookPermission("SimplyPerms", Permission_SimplyPerms.class, ServicePriority.Highest, new String[] { "net.crystalyx.bukkit.simplyperms.SimplyPlugin" });
    

    hookPermission("bPermissions 2", Permission_bPermissions2.class, ServicePriority.Highest, new String[] { "de.bananaco.bpermissions.api.WorldManager" });
    

    hookPermission("zPermissions", Permission_zPermissions.class, ServicePriority.High, new String[] { "org.tyrannyofheaven.bukkit.zPermissions.ZPermissionsPlugin" });
    

    hookPermission("Privileges", Permission_Privileges.class, ServicePriority.Highest, new String[] { "net.krinsoft.privileges.Privileges" });
    

    hookPermission("bPermissions", Permission_bPermissions.class, ServicePriority.High, new String[] { "de.bananaco.permissions.SuperPermissionHandler" });
    

    hookPermission("GroupManager", Permission_GroupManager.class, ServicePriority.High, new String[] { "org.anjocaido.groupmanager.GroupManager" });
    

    hookPermission("Permissions 3 (Yeti)", Permission_Permissions3.class, ServicePriority.Normal, new String[] { "com.nijiko.permissions.ModularControl" });
    

    hookPermission("Xperms", Permission_Xperms.class, ServicePriority.Low, new String[] { "com.github.sebc722.Xperms" });
    

    hookPermission("TotalPermissions", Permission_TotalPermissions.class, ServicePriority.Normal, new String[] { "net.ae97.totalpermissions.TotalPermissions" });
    

    hookPermission("rscPermissions", Permission_rscPermissions.class, ServicePriority.Normal, new String[] { "ru.simsonic.rscPermissions.MainPluginClass" });
    

    hookPermission("KPerms", Permission_KPerms.class, ServicePriority.Normal, new String[] { "com.lightniinja.kperms.KPermsPlugin" });
    
    net.milkbowl.vault.permission.Permission perms = new Permission_SuperPerms(this);
    this.sm.register(net.milkbowl.vault.permission.Permission.class, perms, this, ServicePriority.Lowest);
    log.info(String.format("[Permission] SuperPermissions loaded as backup permission system.", new Object[0]));
    
    this.perms = ((net.milkbowl.vault.permission.Permission)this.sm.getRegistration(net.milkbowl.vault.permission.Permission.class).getProvider());
  }
  
  private void hookChat(String name, Class<? extends Chat> hookClass, ServicePriority priority, String... packages)
  {
    try
    {
      if (packagesExists(packages))
      {
        Chat chat = (Chat)hookClass.getConstructor(new Class[] { Plugin.class, net.milkbowl.vault.permission.Permission.class }).newInstance(new Object[] { this, this.perms });
        this.sm.register(Chat.class, chat, this, priority);
        log.info(String.format("[Chat] %s found: %s", new Object[] { name, chat.isEnabled() ? "Loaded" : "Waiting" }));
      }
    }
    catch (Exception e)
    {
      log.severe(String.format("[Chat] There was an error hooking %s - check to make sure you're using a compatible version!", new Object[] { name }));
    }
  }
  
  private void hookEconomy(String name, Class<? extends Economy> hookClass, ServicePriority priority, String... packages)
  {
    try
    {
      if (packagesExists(packages))
      {
        Economy econ = (Economy)hookClass.getConstructor(new Class[] { Plugin.class }).newInstance(new Object[] { this });
        this.sm.register(Economy.class, econ, this, priority);
        log.info(String.format("[Economy] %s found: %s", new Object[] { name, econ.isEnabled() ? "Loaded" : "Waiting" }));
      }
    }
    catch (Exception e)
    {
      log.severe(String.format("[Economy] There was an error hooking %s - check to make sure you're using a compatible version!", new Object[] { name }));
    }
  }
  
  private void hookPermission(String name, Class<? extends net.milkbowl.vault.permission.Permission> hookClass, ServicePriority priority, String... packages)
  {
    try
    {
      if (packagesExists(packages))
      {
        net.milkbowl.vault.permission.Permission perms = (net.milkbowl.vault.permission.Permission)hookClass.getConstructor(new Class[] { Plugin.class }).newInstance(new Object[] { this });
        this.sm.register(net.milkbowl.vault.permission.Permission.class, perms, this, priority);
        log.info(String.format("[Permission] %s found: %s", new Object[] { name, perms.isEnabled() ? "Loaded" : "Waiting" }));
      }
    }
    catch (Exception e)
    {
      log.severe(String.format("[Permission] There was an error hooking %s - check to make sure you're using a compatible version!", new Object[] { name }));
    }
  }
  
  public boolean onCommand(CommandSender sender, Command command, String commandLabel, String[] args)
  {
    if (!sender.hasPermission("vault.admin")) {
      sender.sendMessage("You do not have permission to use that command!");
    }
    if (command.getName().equalsIgnoreCase("vault-info"))
    {
      infoCommand(sender);
      return true;
    }
    if (command.getName().equalsIgnoreCase("vault-convert"))
    {
      convertCommand(sender, args);
      return true;
    }
    sender.sendMessage("Vault Commands:");
    sender.sendMessage("  /vault-info - Displays information about Vault");
    sender.sendMessage("  /vault-convert [economy1] [economy2] - Converts from one Economy to another");
    return true;
  }
  
  private void convertCommand(CommandSender sender, String[] args)
  {
    Collection<RegisteredServiceProvider<Economy>> econs = getServer().getServicesManager().getRegistrations(Economy.class);
    if ((econs == null) || (econs.size() < 2))
    {
      sender.sendMessage("You must have at least 2 economies loaded to convert.");
      return;
    }
    if (args.length != 2)
    {
      sender.sendMessage("You must specify only the economy to convert from and the economy to convert to. (names should not contain spaces)");
      return;
    }
    Economy econ1 = null;
    Economy econ2 = null;
    for (Object localObject = econs.iterator(); ((Iterator)localObject).hasNext();)
    {
      econ = (RegisteredServiceProvider)((Iterator)localObject).next();
      econName = ((Economy)econ.getProvider()).getName().replace(" ", "");
      if (econName.equalsIgnoreCase(args[0])) {
        econ1 = (Economy)econ.getProvider();
      } else if (econName.equalsIgnoreCase(args[1])) {
        econ2 = (Economy)econ.getProvider();
      }
    }
    if (econ1 == null)
    {
      sender.sendMessage("Could not find " + args[0] + " loaded on the server, check your spelling");
      return;
    }
    if (econ2 == null)
    {
      sender.sendMessage("Could not find " + args[1] + " loaded on the server, check your spelling");
      return;
    }
    sender.sendMessage("This may take some time to convert, expect server lag.");
    localObject = Bukkit.getServer().getOfflinePlayers();RegisteredServiceProvider<Economy> econ = localObject.length;
    for (String econName = 0; econName < econ; econName++)
    {
      OfflinePlayer op = localObject[econName];
      if ((econ1.hasAccount(op)) && 
        (!econ2.hasAccount(op)))
      {
        econ2.createPlayerAccount(op);
        econ2.depositPlayer(op, econ1.getBalance(op));
      }
    }
    sender.sendMessage("Converson complete, please verify the data before using it.");
  }
  
  private void infoCommand(CommandSender sender)
  {
    String registeredEcons = null;
    Collection<RegisteredServiceProvider<Economy>> econs = getServer().getServicesManager().getRegistrations(Economy.class);
    for (RegisteredServiceProvider<Economy> econ : econs)
    {
      e = (Economy)econ.getProvider();
      if (registeredEcons == null) {
        registeredEcons = e.getName();
      } else {
        registeredEcons = registeredEcons + ", " + e.getName();
      }
    }
    Economy e;
    String registeredPerms = null;
    Collection<RegisteredServiceProvider<net.milkbowl.vault.permission.Permission>> perms = getServer().getServicesManager().getRegistrations(net.milkbowl.vault.permission.Permission.class);
    for (RegisteredServiceProvider<net.milkbowl.vault.permission.Permission> perm : perms)
    {
      p = (net.milkbowl.vault.permission.Permission)perm.getProvider();
      if (registeredPerms == null) {
        registeredPerms = p.getName();
      } else {
        registeredPerms = registeredPerms + ", " + p.getName();
      }
    }
    net.milkbowl.vault.permission.Permission p;
    String registeredChats = null;
    Collection<RegisteredServiceProvider<Chat>> chats = getServer().getServicesManager().getRegistrations(Chat.class);
    for (RegisteredServiceProvider<Chat> chat : chats)
    {
      Chat c = (Chat)chat.getProvider();
      if (registeredChats == null) {
        registeredChats = c.getName();
      } else {
        registeredChats = registeredChats + ", " + c.getName();
      }
    }
    RegisteredServiceProvider<Economy> rsp = getServer().getServicesManager().getRegistration(Economy.class);
    Economy econ = null;
    if (rsp != null) {
      econ = (Economy)rsp.getProvider();
    }
    net.milkbowl.vault.permission.Permission perm = null;
    RegisteredServiceProvider<net.milkbowl.vault.permission.Permission> rspp = getServer().getServicesManager().getRegistration(net.milkbowl.vault.permission.Permission.class);
    if (rspp != null) {
      perm = (net.milkbowl.vault.permission.Permission)rspp.getProvider();
    }
    Chat chat = null;
    RegisteredServiceProvider<Chat> rspc = getServer().getServicesManager().getRegistration(Chat.class);
    if (rspc != null) {
      chat = (Chat)rspc.getProvider();
    }
    sender.sendMessage(String.format("[%s] Vault v%s Information", new Object[] { getDescription().getName(), getDescription().getVersion() }));
    sender.sendMessage(String.format("[%s] Economy: %s [%s]", new Object[] { getDescription().getName(), econ == null ? "None" : econ.getName(), registeredEcons }));
    sender.sendMessage(String.format("[%s] Permission: %s [%s]", new Object[] { getDescription().getName(), perm == null ? "None" : perm.getName(), registeredPerms }));
    sender.sendMessage(String.format("[%s] Chat: %s [%s]", new Object[] { getDescription().getName(), chat == null ? "None" : chat.getName(), registeredChats }));
  }
  
  private static boolean packagesExists(String... packages)
  {
    try
    {
      for (String pkg : packages) {
        Class.forName(pkg);
      }
      return true;
    }
    catch (Exception e) {}
    return false;
  }
  
  public double updateCheck(double currentVersion)
  {
    try
    {
      URL url = new URL("https://api.curseforge.com/servermods/files?projectids=33184");
      URLConnection conn = url.openConnection();
      conn.setReadTimeout(5000);
      conn.addRequestProperty("User-Agent", "Vault Update Checker");
      conn.setDoOutput(true);
      BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
      String response = reader.readLine();
      JSONArray array = (JSONArray)JSONValue.parse(response);
      if (array.size() == 0)
      {
        getLogger().warning("No files found, or Feed URL is bad.");
        return currentVersion;
      }
      this.newVersionTitle = ((String)((JSONObject)array.get(array.size() - 1)).get("name")).replace("Vault", "").trim();
      return Double.valueOf(this.newVersionTitle.replaceFirst("\\.", "").trim()).doubleValue();
    }
    catch (Exception e)
    {
      log.info("There was an issue attempting to check for the latest version.");
    }
    return currentVersion;
  }
  
  public class VaultListener
    implements Listener
  {
    public VaultListener() {}
    
    @EventHandler(priority=EventPriority.MONITOR)
    public void onPlayerJoin(PlayerJoinEvent event)
    {
      Player player = event.getPlayer();
      if (Vault.this.perms.has(player, "vault.update")) {
        try
        {
          if (Vault.this.newVersion > Vault.this.currentVersion)
          {
            player.sendMessage("Vault " + Vault.this.newVersion + " is out! You are running " + Vault.this.currentVersion);
            player.sendMessage("Update Vault at: http://dev.bukkit.org/server-mods/vault");
          }
        }
        catch (Exception e) {}
      }
    }
    
    @EventHandler(priority=EventPriority.MONITOR)
    public void onPluginEnable(PluginEnableEvent event)
    {
      if (event.getPlugin().getDescription().getName().equals("Register")) {
        if ((Vault.packagesExists(new String[] { "com.nijikokun.register.payment.Methods" })) && 
          (!Methods.hasMethod())) {
          try
          {
            Method m = Methods.class.getMethod("addMethod", new Class[] { Methods.class });
            m.setAccessible(true);
            m.invoke(null, new Object[] { "Vault", new VaultEco() });
            if (!Methods.setPreferred("Vault")) {
              Vault.log.info("Unable to hook register");
            } else {
              Vault.log.info("[Vault] - Successfully injected Vault methods into Register.");
            }
          }
          catch (SecurityException e)
          {
            Vault.log.info("Unable to hook register");
          }
          catch (NoSuchMethodException e)
          {
            Vault.log.info("Unable to hook register");
          }
          catch (IllegalArgumentException e)
          {
            Vault.log.info("Unable to hook register");
          }
          catch (IllegalAccessException e)
          {
            Vault.log.info("Unable to hook register");
          }
          catch (InvocationTargetException e)
          {
            Vault.log.info("Unable to hook register");
          }
        }
      }
    }
  }
}
