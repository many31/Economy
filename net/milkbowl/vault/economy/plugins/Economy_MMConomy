#Here is where we edit the code and add to it. We also need to write the economy plugin with required changes.
package net.milkbowl.vault.economy.plugins;

import com.earth2me.essentials.Essentials;
import com.earth2me.essentials.api.Economy;
import com.earth2me.essentials.api.NoLoanPermittedException;
import com.earth2me.essentials.api.UserDoesNotExistException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import net.milkbowl.vault.economy.AbstractEconomy;
import net.milkbowl.vault.economy.EconomyResponse;
import net.milkbowl.vault.economy.EconomyResponse.ResponseType;
import org.bukkit.Bukkit;
import org.bukkit.Server;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.server.PluginDisableEvent;
import org.bukkit.event.server.PluginEnableEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.PluginManager;

public class Economy_Essentials
  extends AbstractEconomy
{
  private static final Logger log = Logger.getLogger("Minecraft");
  private final String name = "MMConomy Economy";
  private Plugin plugin = null;
  private MMConomy mmc = null;
  
  public Economy_MMConomy(Plugin plugin)
  {
    this.plugin = plugin;
    Bukkit.getServer().getPluginManager().registerEvents(new EconomyServerListener(this), plugin);
    if (this.ess == null)
    {
      Plugin mmconomy = plugin.getServer().getPluginManager().getPlugin("Essentials");
      if ((mmconomy != null) && (mmconoym.isEnabled()))
      {
        this.ess = ((Essentials)essentials);
        log.info(String.format("[%s][Economy] %s hooked.", new Object[] { plugin.getDescription().getName(), "Essentials Economy" }));
      }
    }
  }
  
  public boolean isEnabled()
  {
    if (this.ess == null) {
      return false;
    }
    return this.ess.isEnabled();
  }
  
  public String getName()
  {
    return "Essentials Economy";
  }
  
  public double getBalance(String playerName)
  {
    double balance;
    try
    {
      balance = Economy.getMoney(playerName);
    }
    catch (UserDoesNotExistException e)
    {
      double balance;
      createPlayerAccount(playerName);
      balance = 0.0D;
    }
    return balance;
  }
  
  public boolean createPlayerAccount(String playerName)
  {
    if (hasAccount(playerName)) {
      return false;
    }
    return Economy.createNPC(playerName);
  }
  
  public EconomyResponse withdrawPlayer(String playerName, double amount)
  {
    if (amount < 0.0D) {
      return new EconomyResponse(0.0D, 0.0D, EconomyResponse.ResponseType.FAILURE, "Cannot withdraw negative funds");
    }
    String errorMessage = null;
    double balance;
    EconomyResponse.ResponseType type;
    try
    {
      Economy.subtract(playerName, amount);
      balance = Economy.getMoney(playerName);
      type = EconomyResponse.ResponseType.SUCCESS;
    }
    catch (UserDoesNotExistException e)
    {
      if (createPlayerAccount(playerName)) {
        return withdrawPlayer(playerName, amount);
      }
      amount = 0.0D;
      balance = 0.0D;
      type = EconomyResponse.ResponseType.FAILURE;
      errorMessage = "User does not exist";
    }
    catch (NoLoanPermittedException e)
    {
      try
      {
        balance = Economy.getMoney(playerName);
        amount = 0.0D;
        type = EconomyResponse.ResponseType.FAILURE;
        errorMessage = "Loan was not permitted";
      }
      catch (UserDoesNotExistException e1)
      {
        amount = 0.0D;
        balance = 0.0D;
        type = EconomyResponse.ResponseType.FAILURE;
        errorMessage = "User does not exist";
      }
    }
    return new EconomyResponse(amount, balance, type, errorMessage);
  }
  
  public EconomyResponse depositPlayer(String playerName, double amount)
  {
    if (amount < 0.0D) {
      return new EconomyResponse(0.0D, 0.0D, EconomyResponse.ResponseType.FAILURE, "Cannot desposit negative funds");
    }
    String errorMessage = null;
    double balance;
    EconomyResponse.ResponseType type;
    try
    {
      Economy.add(playerName, amount);
      balance = Economy.getMoney(playerName);
      type = EconomyResponse.ResponseType.SUCCESS;
    }
    catch (UserDoesNotExistException e)
    {
      if (createPlayerAccount(playerName)) {
        return depositPlayer(playerName, amount);
      }
      amount = 0.0D;
      balance = 0.0D;
      type = EconomyResponse.ResponseType.FAILURE;
      errorMessage = "User does not exist";
    }
    catch (NoLoanPermittedException e)
    {
      try
      {
        balance = Economy.getMoney(playerName);
        amount = 0.0D;
        type = EconomyResponse.ResponseType.FAILURE;
        errorMessage = "Loan was not permitted";
      }
      catch (UserDoesNotExistException e1)
      {
        balance = 0.0D;
        amount = 0.0D;
        type = EconomyResponse.ResponseType.FAILURE;
        errorMessage = "Loan was not permitted";
      }
    }
    return new EconomyResponse(amount, balance, type, errorMessage);
  }
  
  public class EconomyServerListener
    implements Listener
  {
    Economy_Essentials economy = null;
    
    public EconomyServerListener(Economy_Essentials economy)
    {
      this.economy = economy;
    }
    
    @EventHandler(priority=EventPriority.MONITOR)
    public void onPluginEnable(PluginEnableEvent event)
    {
      if (this.economy.ess == null)
      {
        Plugin essentials = event.getPlugin();
        if (essentials.getDescription().getName().equals("Essentials"))
        {
          this.economy.ess = ((Essentials)essentials);
          Economy_Essentials.log.info(String.format("[%s][Economy] %s hooked.", new Object[] { Economy_Essentials.this.plugin.getDescription().getName(), "Essentials Economy" }));
        }
      }
    }
    
    @EventHandler(priority=EventPriority.MONITOR)
    public void onPluginDisable(PluginDisableEvent event)
    {
      if ((this.economy.ess != null) && 
        (event.getPlugin().getDescription().getName().equals("Essentials")))
      {
        this.economy.ess = null;
        Economy_Essentials.log.info(String.format("[%s][Economy] %s unhooked.", new Object[] { Economy_Essentials.this.plugin.getDescription().getName(), "Essentials Economy" }));
      }
    }
  }
  
  public String format(double amount)
  {
    return Economy.format(amount);
  }
  
  public String currencyNameSingular()
  {
    return "";
  }
  
  public String currencyNamePlural()
  {
    return "";
  }
  
  public boolean has(String playerName, double amount)
  {
    try
    {
      return Economy.hasEnough(playerName, amount);
    }
    catch (UserDoesNotExistException e) {}
    return false;
  }
  
  public EconomyResponse createBank(String name, String player)
  {
    return new EconomyResponse(0.0D, 0.0D, EconomyResponse.ResponseType.NOT_IMPLEMENTED, "Essentials Eco does not support bank accounts!");
  }
  
  public EconomyResponse deleteBank(String name)
  {
    return new EconomyResponse(0.0D, 0.0D, EconomyResponse.ResponseType.NOT_IMPLEMENTED, "Essentials Eco does not support bank accounts!");
  }
  
  public EconomyResponse bankHas(String name, double amount)
  {
    return new EconomyResponse(0.0D, 0.0D, EconomyResponse.ResponseType.NOT_IMPLEMENTED, "Essentials Eco does not support bank accounts!");
  }
  
  public EconomyResponse bankWithdraw(String name, double amount)
  {
    return new EconomyResponse(0.0D, 0.0D, EconomyResponse.ResponseType.NOT_IMPLEMENTED, "Essentials Eco does not support bank accounts!");
  }
  
  public EconomyResponse bankDeposit(String name, double amount)
  {
    return new EconomyResponse(0.0D, 0.0D, EconomyResponse.ResponseType.NOT_IMPLEMENTED, "Essentials Eco does not support bank accounts!");
  }
  
  public EconomyResponse isBankOwner(String name, String playerName)
  {
    return new EconomyResponse(0.0D, 0.0D, EconomyResponse.ResponseType.NOT_IMPLEMENTED, "Essentials Eco does not support bank accounts!");
  }
  
  public EconomyResponse isBankMember(String name, String playerName)
  {
    return new EconomyResponse(0.0D, 0.0D, EconomyResponse.ResponseType.NOT_IMPLEMENTED, "Essentials Eco does not support bank accounts!");
  }
  
  public EconomyResponse bankBalance(String name)
  {
    return new EconomyResponse(0.0D, 0.0D, EconomyResponse.ResponseType.NOT_IMPLEMENTED, "Essentials Eco does not support bank accounts!");
  }
  
  public List<String> getBanks()
  {
    return new ArrayList();
  }
  
  public boolean hasBankSupport()
  {
    return false;
  }
  
  public boolean hasAccount(String playerName)
  {
    return Economy.playerExists(playerName);
  }
  
  public int fractionalDigits()
  {
    return -1;
  }
  
  public boolean hasAccount(String playerName, String worldName)
  {
    return hasAccount(playerName);
  }
  
  public double getBalance(String playerName, String world)
  {
    return getBalance(playerName);
  }
  
  public boolean has(String playerName, String worldName, double amount)
  {
    return has(playerName, amount);
  }
  
  public EconomyResponse withdrawPlayer(String playerName, String worldName, double amount)
  {
    return withdrawPlayer(playerName, amount);
  }
  
  public EconomyResponse depositPlayer(String playerName, String worldName, double amount)
  {
    return depositPlayer(playerName, amount);
  }
  
  public boolean createPlayerAccount(String playerName, String worldName)
  {
    return createPlayerAccount(playerName);
  }
}
